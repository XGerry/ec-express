extends templates/default

mixin itemRow(item, order, dbOrder)
  tr(onclick="editItem('"+item._id+"')" class="test" class=((item.pickedQuantity == 0) && (item.item.stock <= 0)) ? 'overdue' : '' class=((item.pickedQuantity < item.quantity) && (item.item.usStock > 0 || item.item.canStock > 0) && dbOrder.hold) ? 'in-stock' : '')
    if (!item.item)
      td Error loading item
      td -
      td -
      td -
      td -
      td -
    else
      td=item.item.sku
      if (item.item.isOption)
        td=item.item.parent.name + ' - ' + item.item.name
      else
        td=item.item.name
      td=item.quantity
      td=item.pickedQuantity
      td
        if (item.price)
          ='$' + item.price.toFixed(2)
        else
          = '$0.00'
      td
        if (item.price)
          ='$' + (item.price * item.quantity).toFixed(2)
        else
          = '$0.00'

append nav-items-right
  li.dropdown.nav-item
    a.nav-link.dropdown-toggle(href="#" aria-haspopup="true" data-toggle="dropdown") Payments
    .dropdown-menu.dropdown-menu-right
      if (order.isCartOrder)
        button.dropdown-item(type="button")#checkPayment Check Payments
      button.dropdown-item(type="button")#addPaymentButton Add Payment
      button.dropdown-item(type="button")#applyPaymentsButton Apply Payments
      button.dropdown-item(type="button")#requestPaymentButton Request Payment
  li.dropdown.nav-item
    a.nav-link.dropdown-toggle(href="#" aria-haspopup="true" data-toggle="dropdown") Customer
    .dropdown-menu.dropdown-menu-right
      a(href="/customer?id="+order.customer._id).dropdown-item View
      a(href="mailto:"+order.customer.email, target="_blank").dropdown-item Email
  li.dropdown.nav-item
    a.nav-link.dropdown-toggle(href="#" aria-haspopup="true" data-toggle="dropdown") Actions
    ul.dropdown-menu.dropdown-menu-right
      if (order.batch)
        a.dropdown-item(href="/batch/"+order.batch) View Batch
      a(href="#").dropdown-item#calculateProfitButton Calculate Profit
      a(href="/shipping-label?id="+order._id target="_blank").dropdown-item White Label
      a(href="/order/slip/"+order._id target="_self").dropdown-item Packing Slip
      //a(href="#").dropdown-item#replacePricing Replace Pricing
      button.dropdown-item#recalculatePricing Recalculate Pricing
      input(type="file" style="display:none;")#fileInput
      //a(href="#").dropdown-item#refreshFromOriginal Reload from Original
      .dropdown-divider
      if (order.batch)
        a(href="#").dropdown-item#removeFromBatchButton Remove from Batch
      a#deleteOrder(href="#").dropdown-item.bg-danger.text-white Delete
  li.dropdown.nav-item
    a.nav-link.dropdown-toggle(href="#" aria-haspopup="true" data-toggle="dropdown") Invoicing
    ul.dropdown-menu.dropdown-menu-right
      button.dropdown-item#invoiceOrder Invoice
      if (order.invoiced)
        button.dropdown-item#createBackorderButton Create Backorder
      button.dropdown-item#updateQuickbooks Update Sales Order
      if (order.imported)
        button.dropdown-item#closeSalesOrderButton Close Sales Order
      button.dropdown-item#emailInvoiceButton Email Invoice

  button.btn-primary.btn.mr-2(type="button")#addItemButton Add Item
  if (order.isCartOrder)
    a(href="https://www.ecstasycrafts." + (order.canadian ? "ca" : "com") + "/admin/order_details.asp?orderid="+order.cartOrder.OrderID target="_blank").btn.btn-info View
      i.far.fa-external-link.pl-2
  button.btn.btn-success.ml-2(type="button")#saveOrderButton Save

append nav-items
  ul.navbar-nav.mr-auto
    h4.pl-2.text-white=order.orderId
    span.navbar-text#orderInfo.ml-2

append head
  title=order.orderId
  script(src="/js/papaparse.min.js")
  
append body
  .container-fluid
    ul.nav.nav-tabs#itemDetailTabs(role="tablist")
      li.nav-item
        a.nav-link.active#info-tab(data-toggle="tab" href="#info" role="tab" aria-controls="info" aria-selected="true") Info
      li.nav-item
        a.nav-link#details-tab(data-toggle="tab" href="#details" role="tab" aria-controls="details" aria-selected="true") Details
      li.nav-item
        a.nav-link#customer-tab(data-toggle="tab" href="#customer" role="tab" aria-controls="customer" aria-selected="false") Customer
      li.nav-item
        a.nav-link#payments-tab(data-toggle="tab" href="#payments" role="tab" aria-controls="payments" aria-selected="false") Payments
          span.badge.badge-secondary.ml-1=order.payments.length
      li.nav-item
        a.nav-link#reports-tab(data-toggle="tab" href="#reports" role="tab" aria-controls="reports" aria-selected="false") Sales Reports

    .tab-content
      .tab-pane.fade.show.active#info(role="tabpanel" aria-labelledby="info-tab")
        .row.pt-2
          .col-8
            -
              var pickedValue = 0;
              pickedValue = order.items.reduce((total, item) => total += item.pickedQuantity * item.price, 0);
              pickedValue += order.shippingCost;
            table.table.table-sm
              thead
                tr
                  th Name
                  th Company Name
                  th Email
                  th Phone
                  th Date
                  th Picked Total
                  th Grand Total
                  th Sales Tax
              tbody
                tr
                  td=order.customer.name
                  td=order.customer.companyName
                  td=order.customer.email
                  td=order.customer.phone
                  td=moment(order.orderDate).format('MMM Do, YYYY h:mm:ss a')
                  td='$' + (order.pickedTotal).toFixed(2)
                  td='$' + (order.subtotal + order.salesTax).toFixed(2)
                  td='$' + order.salesTax.toFixed(2)
          .col-lg-4
            .row
              .col
                label Picked
                label.switch
                  input(type="checkbox" checked=order.picked).default#pickedCheckbox
                  span.slider
              .col
                label Invoiced
                label.switch
                  input.default(type="checkbox" checked=order.invoiced style="transform: scale(2);")#invoicedCheckbox
                  span.slider
              .col
                label Paid
                label.switch
                  input.default(type="checkbox" checked=order.paid style="transform: scale(2);")#paidCheckbox
                  span.slider
              .col
                label Rush
                label.switch
                  input.default(type="checkbox" checked=order.rush style="transform: scale(2);")#rushCheckbox
                  span.slider
              .col
                label Hold
                label.switch
                  input.default(type="checkbox" checked=order.hold style="transform: scale(2);")#holdCheckbox
                  span.slider
        .row
          .col
            .form-group
              label(for="orderTrackingNumber") Tracking Number
              input.form-control(type="text", value=order.trackingNumber)#orderTrackingNumber
          .col
            .form-group
              label(for="orderTrackingNumber") Discount
              .input-group
                .input-group-prepend
                    .input-group-text
                      i.far.fa-dollar-sign
                input.form-control(type="number", value=order.discount)#orderDiscount
          .col
            .form-group
              label(for="orderShippingCost") Shipping Cost
              .input-group
                .input-group-prepend
                    .input-group-text
                      i.far.fa-dollar-sign
                if (order.shippingCost != undefined)
                  input.form-control(type="number", value=order.shippingCost.toFixed(2))#orderShippingCost
                else
                  input.form-control(type="number")#orderShippingCost
          .col
            .form-group
              label(for="orderShipDate") Ship Date
              input.form-control(type="date", value=order.shipDate ? moment(order.shipDate).utc().format('YYYY-MM-DD') : '')#orderShipDate
      .tab-pane.fade#details(role="tabpanel" aria-labelledby="details-tab")
        .row.pt-2
          .col
            table.table.table-sm
              thead
                tr
                  th Payment method
                  th Customer Type
                  th Original Value
                  th Order Total
                  th Order Profit
                  th Open Balance
                  th Order Date
                  th Ordered
                  th Picked
              tbody
                tr
                  if (order.paymentMethod)
                    td= order.paymentMethod
                  else
                    td= order.cartOrder.BillingPaymentMethod
                  if order.customer.canadian
                    if (order.customer.customerType == 0)
                      td Retail
                    else if (order.customer.customerType == 19)
                      td Premier Member
                    else
                      td Wholesale
                  else
                    if (order.customer.customerType == 0)
                      td Retail
                    else if (order.customer.customerType == 18)
                      td Premier Member
                    else
                      td Wholesale
                  td='$'+order.orderValue.toFixed(2)
                  td= '$' + pickedValue.toFixed(2)
                  if (order.orderProfit != undefined)
                    td= '$'+order.orderProfit.toFixed(2)
                  else
                    td N/A
                  td='$'+order.balance.toFixed(2)
                  td= moment(order.orderDate).format('MMM Do, YYYY h:mm:ss a')
                  td= order.numberOfItems
                  td= order.numberOfItemsPicked
        .row
          .col
            table.table.table-sm
              thead
                tr
                  th.text-center Imported
                  th Hold Reason
                  th.text-center Backorder
                  th Batch
                  if (order.isBackorder)
                    th Parent
              tbody
                tr
                  td.text-center
                    input(type="checkbox" checked=order.imported style="transform: scale(2);" disabled)
                  td
                    input(type="text" value=order.reasonForHold).form-control#holdReason
                  td.text-center
                    input(type="checkbox" checked=order.isBackorder style="transform: scale(2);" disabled)
                  td
                    if (order.batch)
                      a(href="/batch?id="+order.batch) View
                    else
                      | None
                  if (order.isBackorder)
                    td
                      a(href="/order?id="+order.parent) View

      .tab-pane.fade#customer(role="tabpanel" aria-labelledby="customer-tab")
        .row.pt-2
          .col
            h5 Billing Info
            .form-group
              label Address 1
              input.form-control(type="text" value=order.customer.billingAddress)#billingAddress
            .form-group
              label Address 2
              input.form-control(type="text" value=order.customer.billingAddress2)#billingAddress2
            .row
              .col
                .form-group
                  label City
                  input.form-control(type="text" value=order.customer.billingCity)#billingCity
              .col
                .form-group
                  label State
                  input.form-control(type="text" value=order.customer.billingState)#billingState
            .row
              .col
                .form-group
                  label Zip Code
                  input.form-control(type="text" value=order.customer.billingZipCode)#billingZipCode
              .col
                .form-group
                  label Country
                  input.form-control(type="text" value=order.customer.billingCountry)#billingCountry
          .col
            h5 Shipping Info
            .row
              .col
                .form-group
                  label Shipment First Name
                  input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentFirstName)#shipmentFirstName
                .form-group
                  label Shipment Last Name
                  input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentLastName)#shipmentLastName
            .form-group
              label Shipment Company
              input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentCompany)#shipmentCompany
            .form-group
              label Address 1
              input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentAddress)#shipmentAddress
            .form-group
              label Address 2
              input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentAddress2)#shipmentAddress2
            .row
              .col
                .form-group
                  label City
                  input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentCity)#shipmentCity
              .col
                .form-group
                  label State
                  input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentState)#shipmentState
            .row
              .col
                .form-group
                  label Zip Code
                  input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentZipCode)#shipmentZipCode
              .col
                .form-group
                  label Country
                  input.form-control(type="text" value=order.cartOrder.ShipmentList[0].ShipmentCountry)#shipmentCountry
      .tab-pane.fade#payments(role="tabpanel" aria-labelledby="payments-tab")
        .row.pt-2
          .col
            table.table.table-striped.table-hover
              thead
                tr
                  th Amount
                  th Type
                  th Reference
                  th Method
                  th ID
              tbody
                each payment in order.payments
                  tr
                    td='$'+payment.amount.toFixed(2)
                    td=payment.type
                    td=payment.reference
                    td=payment.method
                    td=payment.cartId

  if (order.cartOrder.CustomerComments)
    .row
      .col
        h5 Customer Comments
        p=order.cartOrder.CustomerComments
  .row.pt-2
    .col
      h4 Items
      table.table.table-striped.table-hover#orderTable
        thead
          tr
            th SKU
            th Name
            th Ordered
            th Picked
            th Price
            th Line Total
        tbody#orderTableBody
          each item in order.items
            +itemRow(item, order.cartOrder, order)
  if (order.backorders.length > 0)
    .row.pt-2
      .col
        h5 Back Orders
        table.table.table-striped.table-hover#backOrderTable
          thead
            tr
              th Order ID
              th Items Ordered
              th Items Picked
          tbody
            for backorder in order.backorders
              tr(onclick="location='/order?id="+backorder._id+"'")
                td=backorder.orderId
                td=backorder.numberOfItems
                td=backorder.numberOfItemsPicked
  .row
    .col
      h5 Internal Comments
      textarea.form-control(rows=4)#orderComments= order.comments

  #addItemModal.modal(tabindex="-1" role="dialog").fade
    .modal-dialog.modal-lg(role="document")
      .modal-content
        .modal-header
          h5 Add or Edit Item
          button.close(type="button", data-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          .row
            .col
              label SKU
              input.form-control(type="text")#itemSKU
            .col
              label Quantity
              input.form-control(type="number")#itemQuantity
            .col
              label Price
              .input-group
                .input-group-prepend
                  .input-group-text $
                input.form-control(type="number")#itemPrice
            .col
              label Picked
              input.form-control(type="number")#itemPickedQuantity
        .modal-footer
          button.btn-primary.btn(type="button")#saveItemButton Save
          button.btn-outline-danger.btn(type="button")#deleteItemButton Delete
          button.btn-secondary.btn(type="button" data-dismiss="modal")#cancelItemButton Cancel
          a.btn-outline-secondary.btn(target="_blank")#viewItem View Item

  #addPaymentModal.modal(tabindex="-1" role="dialog").fade
    .modal-dialog.modal-lg(role="document")
      .modal-content
        .modal-header
          h5 Record Payment
          button.close(type="button", data-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          .row
            .col
              label Amount
              .input-group
                .input-group-prepend
                  .input-group-text $
                input.form-control(type="number")#paymentAmount
            .col
              label Type
              select.form-control#paymentType
                option(value="Manual") Manual
            .col
              label Reference Code (Optional)
              input.form-control(type="text")#paymentReference
            .col
              label Method
              select.form-control#paymentMethod
                option(value="Stripe") Stripe
                option(value="PayPal") PayPal
                option(value="In-Store") In-Store
        .modal-footer
          button.btn-primary.btn(type="button")#savePaymentButton Save
          button.btn-secondary.btn(type="button" data-dismiss="modal")#cancelPaymentButton Cancel

  script.
    var socket = io();
    var theOrder = !{JSON.stringify(order)};
    var theItem;
    var addingItem = false;
    console.log(theOrder);

    $(document).ready(e => {
      if (theOrder.paid && theOrder.picked && theOrder.invoiced && !theOrder.hold && !theOrder.flags.emailSent && moment(theOrder.orderDate).isAfter('2019-03-05')) {
        let yes = confirm('Looks good! Would you like to email an invoice to the customer?');
        if (yes) {
          sendEmail();
        }
      }

      $('#addItemButton').click(e => {
        addingItem = true;
        var newItem = {
          item: {
            sku: ''
          },
          quantity: 1,
          price: 0,
          pickedQuantity: 0
        }
        showModal(newItem);
      });

      $('#replacePricing').click(e => {
        e.preventDefault();
        $('#fileInput').val('');
        $('#fileInput').click();
      });


      $('#fileInput').on('change', e => {
        console.log('file change');
        $('#fileName').text(e.target.files[0].name);

        $('#fileInput').parse({
          config: {
            complete: function(results, file) {
              loadFromFile(results.data);
            },
            header: true
          },
          complete: function() {
            console.log('all files done');
          }
        });
      });

      $('#saveItemButton').click(e => {
        theItem.quantity = $('#itemQuantity').val();
        theItem.price = $('#itemPrice').val();
        theItem.pickedQuantity = $('#itemPickedQuantity').val();
        if (addingItem) {
          theOrder.items.push(theItem);
        }
        recalculateTotal();
        socket.emit('updateOrder', theOrder, response => {
          location.reload();
        });
      });

      $('#deleteItemButton').click(e => {
        theOrder.items.splice(theOrder.items.indexOf(theItem), 1);
        socket.emit('updateOrder', theOrder, response => {
          location.reload();
        });
      });

      $('#itemSKU').change(e => {
        socket.emit('searchSKU', $('#itemSKU').val(), items => {
          if (items.length == 0) { // item was not found
            alert('The SKU was not found in the database. Please try again.')
            $('#itemSKU').select();
            return;
          }
          theItem.item = items[0];
          theItem.price = determineItemPrice(items[0]);
          $('#itemPrice').val(theItem.price.toFixed(2));
        });
      });

      $('#addItemModal').on('shown.bs.modal', e => {
        $('#itemSKU').select();
      });

      $('#addItemModal').on('hidden.bs.modal', e => {
        addingItem = false;
      });

      $('#pickedCheckbox').on('change', e => {
        theOrder.picked = $('#pickedCheckbox').is(':checked');
      });

      $('#invoicedCheckbox').on('change', e => {
        theOrder.invoiced = $('#invoicedCheckbox').is(':checked');
      });

      $('#paidCheckbox').on('change', e => {
        theOrder.paid = $('#paidCheckbox').is(':checked');
      });

      $('#rushCheckbox').on('change', e => {
        theOrder.rush = $('#rushCheckbox').is(':checked');
      });

      $('#holdCheckbox').on('change', e => {
        theOrder.hold = $('#holdCheckbox').is(':checked');
      });

      $('#saveOrderButton').click(e => {
        saveOrderProperties();
        recalculateTotal();
        socket.emit('updateOrder', theOrder, response => {
          console.log(response);
          location.reload();
        });
      });

      $('#updateQuickbooks').click(e => {
        saveOrderProperties();
        socket.emit('updateOrderQB', theOrder._id, message => {
          $('#orderInfo').text(message);
          setTimeout(() => {
            $('#orderInfo').text('');
          }, 2000);
        });
      });

      $('#invoiceOrder').click(e => {
        saveOrderProperties();
        socket.emit('invoiceOrder', theOrder._id, message => {
          $('#orderInfo').text(message);
          setTimeout(() => {
            $('#orderInfo').text('');
          }, 3000);
        });
      });

      $('#removeFromBatchButton').click(e => {
        e.preventDefault();
        var yes = confirm('Are you sure you want to remove this order from it\'s batch?');
        if (yes) {
          socket.emit('removeOrderFromBatch', theOrder._id, response => {
            location.reload();
          });
        }
      });

      $('#recalculatePricing').click(e => {
        theOrder.items.forEach(item => {
          socket.emit('searchSKU', item.item.sku, returnedItems => {
            if (returnedItems.length == 0) { // item was not found
              console.log('The SKU, ' + item.item.sku + ', was not found in the database. Please try again.');
            } else {
              item.price = determineItemPrice(returnedItems[0]);
            }
          });
        });
        console.log('done.');
        //- socket.emit('updateOrder', theOrder, response => {
        //-   location.reload();
        //- });
      });

      $('#deleteOrder').click(e => {
        e.preventDefault();
        var yes = confirm('Are you sure you want to delete the order from the system? If the order has a status of "New" in 3D Cart it will be imported again.');
        if (yes) {
          socket.emit('deleteOrder', theOrder._id, cb => {
            window.location = '/orders';
          });
        }
      });

      $('#refreshFromOriginal').click(e => {
        e.preventDefault();
        var yes = confirm('This will revert the order to it\'s original state. Are you sure you want to continue?');
        if (yes) {
          socket.emit('refreshOrder', theOrder._id, cb => {
            location.reload();
          });
        }
      });

      $('#createBackorderButton').click(e => {
        e.preventDefault();
        var yes = confirm('This will create a back order for this order with all unpicked items on it. Do you want to continue?');
        if (yes) {
          socket.emit('createBackorder', theOrder._id, cb => {
            location.reload();
          });
        }
      });

      $('#calculateProfitButton').click(e => {
        e.preventDefault();
        socket.emit('calculateProfit', theOrder._id, cb => {
          location.reload();
        });
      });

      $('#emailInvoiceButton').click(e => {
        e.preventDefault();
        sendEmail();
      });

      $('#closeSalesOrderButton').click(e => {
        e.preventDefault();
        let message = 'This will manually close the original sales order in Quickbooks. Do you want to continue?';
        if (theOrder.backorders.length > 0) {
          message = 'You have back orders associated with this sales order. Are you sure you want to close it?';
        }
        var yes = confirm(message);
        if (yes) {
          socket.emit('closeSalesOrder', theOrder.orderId, cb => {
            $('#orderInfo').text(cb);
            setTimeout(() => {
              $('#orderInfo').text('');
            }, 2000);
          });
        }
      });

      $('#requestPaymentButton').click(e => {
        alert('Coming Soon!');
        //- axios.post('/api/stripe/invoice/'+theOrder._id).then(response => {
        //-   console.log(response);
        //- });
      });

      $('#checkPayment').click(e => {
        axios.get('/api/order/'+theOrder._id+'/cart/payments').then(response => {
          location.reload();
        }).catch(err => {
          location.reload();
        });
      });

      $('#addPaymentButton').click(e => {
        $('#addPaymentModal').modal();
      });

      $('#applyPaymentsButton').click(e => {
        if (theOrder.flags.paymentsApplied) {
          alert('The payments have already been applied for this order. Please edit the payments in Quickbooks.');
          return;
        }

        axios.post('/api/qb/payments/'+theOrder._id).then(response => {
          console.log(response);
        });
      });

      $('#savePaymentButton').click(e => {
        let payment = {
          amount: $('#paymentAmount').val(),
          type: $('#paymentType').val(),
          reference: $('#paymentReference').val(),
          method: $('#paymentMethod').val()
        };
        axios.put('/api/order/'+theOrder._id+'/payment', payment).then(response => {
          location.reload();
        }).catch(err => {
          console.log(err);
          alert('There was an error');
        })
      });

      $('#orderTable').DataTable({
        order: [[0, 'asc']],
        pageLength: -1
      });
    });

    function determineItemPrice(item) {
      if (theOrder.canadian) {
        if (theOrder.customer.customerType == 0 || theOrder.customer.customerType == 19) {
          return item.canPrice;
        } else {
          return item.canWholesalePrice;
        }
      } else {
        if (theOrder.customer.customerType == 0 || theOrder.customer.customerType == 18) {
          return item.usPrice;
        } else {
          return item.usWholesalePrice;
        }
      }
    }

    function sendEmail() {
      let sendEmail = !theOrder.flags.emailSent;
      if (theOrder.flags.emailSent) {
        sendEmail = confirm('An invoice has already been emailed to the customer. Are you sure you want to send another?');
      }
      if (sendEmail) {
        axios.get('/api/order/email/invoice/'+theOrder._id).then(response => {
          $('#orderInfo').text('Email sent.');
          theOrder.flags.emailSent = true;
          setTimeout(() => {
            $('#orderInfo').text('');
          }, 3000);
        }).catch(err => {
          alert('There was an error sending the email. Please make sure you are logged in.');
        });
      } else {
        $('#orderInfo').text('Email not sent.');
        setTimeout(() => {
          $('#orderInfo').text('');
        }, 3000);
      }
    }

    function showModal(item) {
      theItem = item;
      $('#addItemModal').modal();
      $('#itemSKU').val(item.item.sku);
      $('#itemQuantity').val(item.quantity);
      if (item.price != undefined && item.price != null)
        $('#itemPrice').val(item.price.toFixed(2));
      $('#itemPickedQuantity').val(item.pickedQuantity);
      $('#viewItem').prop('href', '/item?id='+item.item._id);
    }

    function editItem(id) {
      for (item of theOrder.items) {
        if (item._id == id)
          showModal(item);
      }
    }

    function recalculateTotal() {
      theOrder.orderValue = 0;
      theOrder.items.forEach(item => {
        theOrder.orderValue += (item.quantity * item.price);
      });
    }

    function saveOrderProperties() {
      theOrder.shippingCost = $('#orderShippingCost').val();
      theOrder.reasonForHold = $('#holdReason').val();
      theOrder.comments = $('#orderComments').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentAddress = $('#shipmentAddress').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentAddress2 = $('#shipmentAddress2').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentCity = $('#shipmentCity').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentState = $('#shipmentState').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentZipCode = $('#shipmentZipCode').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentCountry = $('#shipmentCountry').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentFirstName = $('#shipmentFirstName').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentLastName = $('#shipmentLastName').val();
      theOrder.cartOrder.ShipmentList[0].ShipmentCompany = $('#shipmentCompany').val();
      theOrder.cartOrder.BillingAddress = $('#billingAddress').val();
      theOrder.cartOrder.BillingAddress2 = $('#billingAddress2').val();
      theOrder.cartOrder.BillingCity = $('#billingCity').val();
      theOrder.cartOrder.BillingState = $('#billingState').val();
      theOrder.cartOrder.BillingZipCode = $('#billingZipCode').val();
      theOrder.cartOrder.BillingCountry = $('#billingCountry').val();
      theOrder.shipDate = $('#orderShipDate').val();
      theOrder.trackingNumber = $('#orderTrackingNumber').val();
      theOrder.discount = parseFloat($('#orderDiscount').val());
    }

    function loadFromFile(items) {
      theOrder.items.forEach(orderItem => {
        for (let i = 0; i < items.length; i++) {
          if (orderItem.item.sku == items[i].sku) {
            orderItem.price = items[i].price;
            break;
          }
        }
      });

      recalculateTotal();
      socket.emit('updateOrder', theOrder, response => {
        location.reload();
      });
    }


mixin itemRow(item, order)
	tr(onclick="editItem('"+item._id+"')")
		td=item.item.sku
		if (item.item.isOption)
			td=item.item.parent.name + ' - ' + item.item.name
		else
			td=item.item.name
		td=item.quantity
		td=item.pickedQuantity
		td
			if (item.price)
				='$' + item.price.toFixed(2)
			else
				= '$0.00'
		td
			if (item.price)
				='$' + (item.price * item.quantity).toFixed(2)
			else
				= '$0.00'

doctype html
include mixins
html
	include includes/head
		title=order.orderId
	body
		#wrapper
			+sidebarNav("orders")
			#page-content
				nav.navbar.navbar-light.bg-light.navbar-expand-sm.sticky-top
					button.btn.btn-secondary.btn-toggles(type="button").m-0.position-relative#left-menu-toggle
						i.far.fa-bars.fa-fw
					span.navbar-brand.mb-0.h1.pl-2=order.orderId
					//form.form-inline
						select.form-control#orderStatus
							option(value=1) New
							option(value=2) Processing
							option(value=3) Backorder
							option(value=6) Pre-order
							option(value=9) Awaiting Payment
							option(value=13) Awaiting Shipment
							option(value=4) Shipped
					span.navbar-text#orderInfo.ml-2
					ul.navbar-nav.ml-auto
						li.dropdown.nav-item
							a.nav-link.dropdown-toggle(href="#" aria-haspopup="true" data-toggle="dropdown") Actions
							ul.dropdown-menu.dropdown-menu-right
								a(href="https://www.ecstasycrafts." + (order.canadian ? "ca" : "com") + "/admin/order_details.asp?orderid="+order.cartOrder.OrderID target="_blank").dropdown-item View on 3D Cart
								a(href="/shipping-label?id="+order._id target="_blank").dropdown-item White Label
								.dropdown-divider
								a(href="#").dropdown-item#removeFromBatchButton Remove from Batch
								a#deleteOrder(href="#").dropdown-item.bg-danger.text-white Delete
						button.btn-primary.btn.mr-2(type="button")#addItemButton Add Item
						.btn-group
							button.btn.btn-success(type="button")#saveOrderButton Save
							button.btn.btn-success.dropdown-toggle.dropdown-toggle-split(type="button" data-toggle="dropdown")
							.dropdown-menu.dropdown-menu-right
								a.dropdown-item(href="#")#updateQuickbooks Update in QB
								a.dropdown-item(href="#")#invoiceOrder Invoice Order

				.container.pt-3
					.row
						.col
							h4 Information
							table.table.table-sm#customerTable
								thead
									tr
										th Name
										th Email
										th Phone
										th.text-center Picked
										th.text-center Invoiced
										th.text-center Paid
										th.text-center Rush
										th.text-center Hold
										th Batch
								tbody#customerTableBody
									tr
										td=order.name
										td=order.cartOrder.BillingEmail
										td=order.cartOrder.BillingPhoneNumber
										td.text-center
											input(type="checkbox" checked=order.picked style="transform: scale(2);")#pickedCheckbox
										td.text-center
											input(type="checkbox" checked=order.invoiced style="transform: scale(2);")#invoicedCheckbox
										td.text-center
											input(type="checkbox" checked=order.paid style="transform: scale(2);")#paidCheckbox
										td.text-center
											input(type="checkbox" checked=order.rush style="transform: scale(2);")#rushCheckbox
										td.text-center
											input(type="checkbox" checked=order.hold style="transform: scale(2);")#holdCheckbox
										td
											if (order.batch)
												a(href="batch?id="+order.batch) View
											else
												| None
					.row
						.col
							table.table.table-sm
								thead
									tr
										th Payment method
										th Customer Type
										th Original Value
										th Picked Value
										th Order Date
								tbody
									tr
										td= order.cartOrder.BillingPaymentMethod
										td= order.customerType == 0 ? 'Retail' : 'Wholesale'
										td='$'+order.orderValue.toFixed(2)
										-
											var pickedValue = 0;
											order.items.forEach(item => {
												var itemPrice = 0;
												if (order.canadian) {
													if (order.customerType == 0) {
														itemPrice = item.item.canPrice;
													} else {
														itemPrice = item.item.canWholesalePrice;
													}
												} else {
													if (order.customerType == 0) {
														itemPrice = item.item.usPrice;
													} else {
														itemPrice = item.item.usWholesalePrice;
													}
												}
												var lineValue = itemPrice * item.pickedQuantity;
												pickedValue += lineValue;
											});
										td= '$' + pickedValue.toFixed(2)
										td= moment(order.orderDate).format('MMM Do, YYYY h:mm:ss a')
					.row.pt-2
						.col
							.form-group
								label(for="orderTrackingNumber") Tracking Number
								input.form-control(type="text", value=order.trackingNumber)#orderTrackingNumber
						.col
							.form-group
								label(for="orderShippingCost") Shipping Cost
								.input-group
									.input-group-prepend
											.input-group-text
												i.far.fa-dollar-sign
									input.form-control(type="number", value=order.shippingCost.toFixed(2))#orderShippingCost

					if (order.cartOrder.CustomerComments)
						.row
							.col
								h5 Comments
								p=order.cartOrder.CustomerComments
					.row.pt-2
						.col
							h4 Order
							table.table.table-striped.table-hover#orderTable
								thead
									tr
										th SKU
										th Name
										th Ordered
										th Picked
										th Price
										th Line Total
								tbody#orderTableBody
									each item in order.items
										+itemRow(item, order.cartOrder)
		
		#addItemModal.modal(tabindex="-1" role="dialog").fade
			.modal-dialog.modal-lg(role="document")
				.modal-content
					.modal-header
						h5 Add or Edit Item
						button.close(type="button", data-dismiss="modal", aria-label="Close")
							span(aria-hidden="true") &times;
					.modal-body
						.row
							.col
								label SKU
								input.form-control(type="text")#itemSKU
							.col
								label Quantity
								input.form-control(type="number")#itemQuantity
							.col
								label Price
								.input-group
									.input-group-prepend
										.input-group-text $
									input.form-control(type="number")#itemPrice
							.col
								label Picked
								input.form-control(type="number")#itemPickedQuantity
					.modal-footer
						button.btn-primary.btn(type="button")#saveItemButton Save
						button.btn-outline-danger.btn(type="button")#deleteItemButton Delete
						button.btn-secondary.btn(type="button" data-dismiss="modal")#cancelItemButton Cancel
						a.btn-outline-secondary.btn(target="_blank")#viewItem View Item

		+footer
		script.
			var socket = io();
			var theOrder = !{JSON.stringify(order)};
			var theItem;
			var addingItem = false;
			console.log(theOrder);

			$(document).ready(e => {
				$('#addItemButton').click(e => {
					addingItem = true;
					var newItem = {
						item: {
							sku: ''
						},
						quantity: 1,
						price: 0,
						pickedQuantity: 0
					}
					showModal(newItem);
				});

				$('#saveItemButton').click(e => {
					theItem.quantity = $('#itemQuantity').val();
					theItem.price = $('#itemPrice').val();
					theItem.pickedQuantity = $('#itemPickedQuantity').val();
					if (addingItem) {
						theOrder.items.push(theItem);
					}
					recalculateTotal();
					socket.emit('updateOrder', theOrder, response => {
						location.reload();
					});
				});

				$('#deleteItemButton').click(e => {
					theOrder.items.splice(theOrder.items.indexOf(theItem), 1);
					socket.emit('updateOrder', theOrder, response => {
						location.reload();
					});
				});

				$('#itemSKU').change(e => {
					socket.emit('searchSKU', $('#itemSKU').val(), items => {
						if (items.length == 0) { // item was not found
							alert('The SKU was not found in the database. Please try again.')
							$('#itemSKU').select();
							return;
						}
						theItem.item = items[0];
						theItem.price = determineItemPrice(items[0]);
						$('#itemPrice').val(theItem.price.toFixed(2));
					});
				});

				$('#addItemModal').on('shown.bs.modal', e => {
					$('#itemSKU').select();
				});

				$('#addItemModal').on('hidden.bs.modal', e => {
					addingItem = false;
				});

				$('#pickedCheckbox').on('change', e => {
					theOrder.picked = $('#pickedCheckbox').is(':checked');
				});

				$('#invoicedCheckbox').on('change', e => {
					theOrder.invoiced = $('#invoicedCheckbox').is(':checked');
				});

				$('#paidCheckbox').on('change', e => {
					theOrder.paid = $('#paidCheckbox').is(':checked');
				});

				$('#rushCheckbox').on('change', e => {
					theOrder.rush = $('#rushCheckbox').is(':checked');
				});

				$('#holdCheckbox').on('change', e => {
					theOrder.hold = $('#holdCheckbox').is(':checked');
				});

				$('#saveOrderButton').click(e => {
					theOrder.shippingCost = $('#orderShippingCost').val();
					recalculateTotal();
					socket.emit('updateOrder', theOrder, response => {
						console.log(response);
						$('#orderInfo').text('Saved Successfully!');
						setTimeout(() => {
							$('#orderInfo').text('');
						}, 2000);
					});
				});

				$('#updateQuickbooks').click(e => {
					theOrder.shippingCost = $('#orderShippingCost').val();
					socket.emit('updateOrderQB', theOrder._id, message => {
						$('#orderInfo').text(message);
						setTimeout(() => {
							$('#orderInfo').text('');
						}, 2000);
					});
				});

				$('#invoiceOrder').click(e => {
					theOrder.shippingCost = $('#orderShippingCost').val();
					socket.emit('invoiceOrder', theOrder._id, message => {
						$('#orderInfo').text(message[0].message + ' - Run the web connector.');
						setTimeout(() => {
							$('#orderInfo').text('');
						}, 2000);
					});
				});

				$('#removeFromBatchButton').click(e => {
					e.preventDefault();
					var yes = confirm('Are you sure you want to remove this order from it\'s batch?');
					if (yes) {
						socket.emit('removeOrderFromBatch', theOrder._id, response => {
							location.reload();
						});
					}
				});

				$('#deleteOrder').click(e => {
					e.preventDefault();
					var yes = confirm('Are you sure you want to delete the order from the system? If the order has a status of "New" in 3D Cart it will be imported again.');
					if (yes) {
						socket.emit('deleteOrder', theOrder._id, cb => {
							window.location = '/orders';
						});
					}
				});
			});

			function determineItemPrice(item) {
				if (theOrder.canadian) {
					if (theOrder.customerType == 0) {
						return item.canPrice;
					} else {
						return item.canWholesalePrice;
					}
				} else {
					if (theOrder.customerType == 0) {
						return item.usPrice;
					} else {
						return item.usWholesalePrice;
					}
				}
			}

			function showModal(item) {
				theItem = item;
				$('#addItemModal').modal();
				$('#itemSKU').val(item.item.sku);
				$('#itemQuantity').val(item.quantity);
				if (item.price)
					$('#itemPrice').val(item.price.toFixed(2));
				$('#itemPickedQuantity').val(item.pickedQuantity);
				$('#viewItem').prop('href', '/item?id='+item.item._id);
			}

			function editItem(id) {
				for (item of theOrder.items) {
					if (item._id == id)
						showModal(item);
				}
			}

			function recalculateTotal() {
				theOrder.orderValue = 0;
				theOrder.items.forEach(item => {
					theOrder.orderValue += (item.quantity * item.price);
				});
			}


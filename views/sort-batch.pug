extends templates/default

mixin orderSummaryTableRow(order, index)
	tr(class=order._id + '-row' onclick="openOrder('"+order._id+"')").sortTableRow
		td=index+1
		td=order.orderId
		td=order.customer.name
		td=order.items.length
		td=order.items.reduce((total, item) => total + item.quantity, 0)
		td(class=order._id + '-picked')=order.items.reduce((total, item) => total + item.pickedQuantity, 0)

mixin modalOrderTableRow(order, index)
	tr(class=order._id + '-row').sortTableRow
		td.text-center
			h5=index+1
		td.text-center=order.orderId
		td.text-center=order.items.reduce((total, item) => total + item.quantity, 0)
		td.text-center(class=order._id + '-picked')=order.items.reduce((total, item) => total + item.pickedQuantity, 0)

mixin itemRow(item)
	tr(onclick="noBarcodeSort(event, '"+item.item._id+"')", id=item._id+"-row")
		td=item.item.sku
		td
			if (item.item.imageURL && item.item.imageURL.startsWith('http'))
				img(src=item.item.imageURL, width="100px", height="auto")
			else
				img(src="https://www.ecstasycrafts.com/"+item.item.imageURL, width="100px", height="auto")
		td=item.quantity

append nav-items-right
	li.dropdown.nav-item
		a.nav-link.dropdown-toggle(href="#" aria-haspopup="true" data-toggle="dropdown") Actions
		ul.dropdown-menu.dropdown-menu-right
			a#resetBatch(href="#").dropdown-item.bg-danger.text-white Reset Batch
	button.btn-outline-success.btn.mr-2(type="button")#saveButton Save
	button.btn.btn-success(type="button")#finishedSortingButton Finished Sorting

append nav-items
	span.navbar-brand.mb-0.h1.pl-2=batch._id + ' - ' + batch.shortid
	span.navbar-text#orderInfo.ml-2

append head
	title Sort Batch

append body
	.row.pt-2
		.col-12
			table.table-sm.table
				thead 
					tr 
						th Total Number of SKUs
						th Total Number of Items
						th Number of Orders
						th Status
				tbody
					tr
						td=batch.numberOfSkus
						td=batch.numberOfItems
						td=batch.orders.length
						td=batch.completed ? 'Finished' : 'In Progress'
	.row.justify-content-center
		.col-8
			input.form-control.form-control-lg(type="text" placeholder="Scan the barcode of your item here")#item-barcode
	.row.pt-5
		.col-12
			table.table-sm.table.table-hover
				thead
					tr
						th Box Number
						th Order ID
						th Customer
						th Number of SKUs
						th Total Items
						th Items Picked
				tbody#ordersSummary
					each order, index in batch.orders
						+orderSummaryTableRow(order, index)
	.row.pt-2
		h2 Items in Batch
		table.table.table-hover
			thead
				tr
					th SKU
					th Image
					th Ordered
			-
				var allItems = batch.orders.reduce((arr, order) => {
					return arr.concat(order.items);
				}, []);
				allItems.sort((a, b) => {
					if (a.item.sku < b.item.sku)
						return -1;
					else
						return 1;
				});

			tbody#itemsWithoutBarcodeTable
				each item in allItems
					if (item.pickedQuantity < item.quantity)
						+itemRow(item)

		.modal(role="dialog" tabindex="-1").fade#sortModal
			.modal-dialog(role="document")
				.modal-content
					.modal-header.d-block
						.d-flex
							h5#modalItemSku
							button.close(type="button", data-dismiss="modal", aria-label="Close")
								span(aria-hidden="true") &times;
						h6#modalItemName
					.modal-body
						.row
							.col-12.text-center
								img#modalImage(width="auto" style="max-height:300px;")
						.row.pt-2.text-center
							.col-12
								h6 Quantity
						.row.justify-content-center
							.col-4.text-center
								input.form-control.form-control-lg(type="number")#sortModalQuantity
						.row.pt-2
							.col-12
								table.table.table-sm
									thead
										tr
											th.text-center Box
											th.text-center Order
											th.text-center Total Items
											th.text-center Items Picked
									tbody
										each order, index in batch.orders
											+modalOrderTableRow(order, index)

					.modal-footer
						button.btn.btn-primary(type="button")#confirmSortingButton Confirm
						button.btn.btn-secondary(data-dismiss="modal")#cancelSortingButton Cancel

		script.
			var socket = io();
			var batch = !{JSON.stringify(batch)};
			var theItem;
			$(document).ready(e => {
				console.log(batch);
				$('#item-barcode').select();
				refreshPickedQuantities();

				$('#confirmSortingButton').click(e => {
					confirmSorting();
				});

				$('#resetBatch').click(e => {
					var yes = confirm('This will revert all picked quantities to 0 for all orders on the batch. Are you sure you want to continue?');
					if (yes) {
						socket.emit('resetBatch', batch._id, cb => {
							location.reload();
						});
					}
				});

				$('#cancelSortingButton').click(e => {
					$('#sortModal').modal('hide');
					refreshPickedQuantities();
					$('#item-barcode').select();
				});

				$('#finishedSortingButton').click(e => {
					var answer = confirm('Are you sure you are finished sorting this order? Any items that were not picked will be placed on back order');
					if (answer) {
						axios.post('/api/batch/finish', batch).then(response => {
							console.log(response);
							window.location='/batch/confirm/'+batch._id;
						}).catch(err => {
							console.log(err.response);
							if (err.response.status == 401) {
								alert('You must be signed in to finish a batch! Please save the batch, log in and try again.');
							} else {
								alert('There was an error finishing the batch!');
							}
						});
					}
				});

				$('#sortModal').on('shown.bs.modal', e => {
					$('#sortModalQuantity').select();
				});

				$('#sortModal').on('hidden.bs.modal', e => {
					refreshPickedQuantities();
				});

				$('#sortModalQuantity').on('keypress', e => {
					var key = e.which || e.keyCode;
					if (key == 13) { // enter key
						confirmSorting();
					}
				});

				$('#saveButton').click(e => {
					console.log(batch);
					socket.emit('saveBatch', batch, cb => {
						location.reload();
					});
				});

				$('#item-barcode').on('keypress', e => {
					var key = e.which || e.keyCode;
					if (key == 13) { // enter key
						var barcode = $('#item-barcode').val();
						if (barcode != '') {
							// find the item and display the order it belongs to
							try {
								var match = sortItem(barcode);
								showSortModal(match);
							} catch (e) {
								alert(e);
								$('#item-barcode').select();
							}
						}
					}
				});
			});

			function sortItem(barcode) {
				var match = {}
				var foundMatch = false;
				for (let [index, order] of batch.orders.entries()) {
					for (let item of order.items) {
						if (item.item.barcode == barcode) {
							if (item.pickedQuantity < item.quantity) {
								match.orderId = order.orderId;
								match._id = order._id;
								match.box = index + 1;
								match.item = item;
								theItem = item;
								foundMatch = true;
								break;
							} else {
								console.log('this particular item has been picked already, moving on');
							}
						}
					}
				}

				if (foundMatch) {
					return match;
				} else {
					throw 'No orders in this batch need that item. You have possibly picked the wrong item, or the wrong quantity.'; 
				}
			}

			function confirmSorting() {
				var pickedQuantity = parseInt($('#sortModalQuantity').val());

				if ((pickedQuantity + theItem.pickedQuantity) > theItem.quantity || pickedQuantity == NaN) {
					alert('Invalid item quantity! Fix the quantity and try again.');
				} else {
					$('#sortModal').modal('hide');
					theItem.pickedQuantity += pickedQuantity;
					refreshPickedQuantities();
					// remove the row if the quantity has been fulfilled
					$('#'+theItem._id+'-row').remove();
					$('#item-barcode').select();
				}
			}

			function refreshPickedQuantities() {
				batch.orders.forEach(order => {
					var totalPicked = order.items.reduce((total, item) => total + item.pickedQuantity, 0);
					var totalQuantity = order.items.reduce((total, item) => total + item.quantity, 0);
					$('.'+order._id+'-picked').each((i, obj) => {
						$(obj).text(totalPicked);
					});
					$('.'+order._id+'-row').each((i, obj) => {
						$(obj).removeClass('bg-primary text-white');
					});

					if (totalPicked == totalQuantity) {
						$('.'+order._id+'-row').each((i, obj) => {
							$(obj).addClass('bg-success text-white');
						});
					}
				});
			}

			function noBarcodeSort(e, id) {
				var match = {};
				batch.orders.forEach((order, index) => {
					order.items.forEach(item => {
						if (item.item._id == id) {
							if (item.pickedQuantity < item.quantity) {
								// add the item to the order
								match.orderId = order.orderId;
								match._id = order._id;
								match.box = index + 1;
								match.item = item;
								theItem = item;
							}
						}
					});
				});

				if (match.orderId == undefined) {
					alert('Could not find the order that item belongs to.');
					return;
				}
				showSortModal(match);
			}

			function showSortModal(match) {
				$('#sortModal').modal();
				$('#modalItemSku').text(match.item.item.sku);
				$('#modalItemName').text(match.item.item.name);
				$('.'+match._id+'-row').each((i, obj) => {
					$(obj).addClass('bg-primary text-white');
				});
				if (match.item.item.imageURL && match.item.item.imageURL.startsWith('http')) {
					$('#modalImage').prop('src', match.item.item.imageURL);
				} else {
					$('#modalImage').prop('src', 'https://www.ecstasycrafts.com/'+match.item.item.imageURL);
				}
				$('#sortModalQuantity').val(match.item.quantity - match.item.pickedQuantity);
			}

			function openOrder(id) {
				window.open('/order?id='+id, '_blank');
			}
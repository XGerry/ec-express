mixin orderSummaryTableRow(order, index)
	tr(id=order._id+'-row')
		td=index+1
		td=order.orderId
		td=order.name
		td=order.items.length
		td=order.items.reduce((total, item) => total + item.quantity, 0)
		td(id=order._id+'-picked')=order.items.reduce((total, item) => total + item.pickedQuantity, 0)
		th
			input(type="checkbox", style="transform: scale(2);margin: 0;", id=order._id+'-print', checked=order.toPrint)

mixin itemRow(item)
	tr(onclick="noBarcodeSort(event, '"+item.item._id+"')", id=item.item._id+"-row")
		td=item.item.sku
		td
			img(src="https://www.ecstasycrafts.com/"+item.item.imageURL, width="100px", height="auto")
		td=item.quantity
		td
			input.form-control(type="number", value=item.quantity, id=item.item._id+'-picked')

doctype html
include mixins
html
	include includes/head
		title Sort Batch
	body
		#wrapper
			+sidebarNav("batch-sheet")

			#page-content
				+menuToggle
				.container.pt-3
					.row
						.col-12.text-center
							h2 Sort Batch
					.row.pt-2
						.col-12
							table.table-sm.table
								thead 
									tr 
										th Total Number of SKUs
										th Total Number of Items
										th Number of Orders
										th Status
								tbody
									tr
										td=batch.numberOfSkus
										td=batch.numberOfItems
										td=batch.orders.length
										td=batch.completed ? 'Finished' : 'In Progress'
					.row.justify-content-center
						.col-8
							input.form-control.form-control-lg(type="text" placeholder="Scan the barcode of your item here")#item-barcode
					.row.pt-5
						.col
							h2#boxNumber Box Number
						.col
							h2#orderId Order ID
						.col
							button.btn.btn-outline-success.btn-lg.disabled#doneSortingButton Done

					.row.pt-5
						.col-12
							table.table-sm.table
								thead
									tr
										th Box Number
										th Order ID
										th Customer
										th Number of SKUs
										th Total Items
										th Items Picked
										th Packing Slip
								tbody#ordersSummary
									each order, index in batch.orders
										+orderSummaryTableRow(order, index)
					.row.pt-2
						h2 Items without a barcode
						table.table.table-hover
							thead
								tr
									th SKU
									th Image
									th Ordered
									th Picked
							-
								var allItems = batch.orders.reduce((arr, order) => {
									return arr.concat(order.items);
								}, []);
								allItems.filter(item => item.barcode == undefined || item.barcode == '');
								allItems.sort((a, b) => {
									if (a.sku < b.sku)
										return -1;
									else
										return 1;
								});

							tbody#itemsWithoutBarcodeTable
								each item in allItems
									if (item.pickedQuantity < item.quantity)
										+itemRow(item)

					.row.pt-5
						.col-12.text-center
							button.btn.btn-success.btn-lg#finishedSortingButton Finished Sorting

		+footer
		script.
			var socket = io();
			var batch = !{JSON.stringify(batch)};
			var rowToRemove;
			$(document).ready(e => {
				console.log(batch);
				$('#item-barcode').select();

				$('#doneSortingButton').click(e => {
					refreshPickedQuantities();
					resetSorting();
				});

				$('#finishedSortingButton').click(e => {
					var answer = confirm('Are you sure you are finished sorting this order? Any items that were not picked will be placed on back order');
					if (answer) {
						batch.orders.forEach(order => {
							order.toPrint = $('#'+order._id+'-print').is(':checked');
						});
						console.log(batch);
						socket.emit('finishBatch', batch, response => {
							console.log(response);
							window.location='/packing-slip?id='+batch._id;
						});
					}
				});

				$('#item-barcode').on('keypress', e => {
					var key = e.which || e.keyCode;
					if (key == 13) { // enter key
						var barcode = $('#item-barcode').val();
						if (barcode != '') {
							// find the item and display the order it belongs to
							try {
								var match = sortItem(barcode);
								$('#boxNumber').text(match.box);
								$('#orderId').text(match.orderId);
								$('#doneSortingButton').removeClass('disabled');
								$('#item-barcode').addClass('diabled');
								$('#'+match._id+'-row').addClass('bg-primary text-white');
							} catch (e) {
								alert(e);
								resetSorting();
							}
						}
					}
				});
			});

			function sortItem(barcode) {
				var match = {}
				var foundMatch = false;
				for (let [index, order] of batch.orders.entries()) {
					for (let item of order.items) {
						if (item.item.barcode == barcode) {
							if (item.pickedQuantity < item.quantity) {
								item.pickedQuantity++;
								match.orderId = order.orderId;
								match._id = order._id;
								match.box = index + 1;
								foundMatch = true;
								break;
							} else {
								console.log('this particular item has been picked already, moving on');
							}
						}
					}
				}

				if (foundMatch) {
					return match;
				} else {
					throw 'No orders in this batch need that item. You have possibly picked the wrong item, or the wrong quantity.'; 
				}
			}

			function resetSorting() {
				$('#item-barcode').select();
				$('#boxNumber').text('Box Number');
				$('#orderId').text('Order ID');
				if (rowToRemove) {
					$('#'+rowToRemove+'-row').remove();
					rowToRemove = undefined;
				}
			}

			function refreshPickedQuantities() {
				batch.orders.forEach(order => {
					var totalPicked = order.items.reduce((total, item) => total + item.pickedQuantity, 0);
					var totalQuantity = order.items.reduce((total, item) => total + item.quantity, 0);
					$('#'+order._id+'-picked').text(totalPicked);
					$('#'+order._id+'-row').removeClass('bg-primary text-white');

					if (totalPicked == totalQuantity) {
						$('#'+order._id+'-row').addClass('bg-success text-white');
					}
				});
			}

			function noBarcodeSort(e, id) {
				if (e.target.id == id+'-picked') {
					// we're editing the picked quantity, so do nothing
					return;
				}
				var match = {};
				if (rowToRemove) {
					alert('Please click Done to verify that you placed the item in the box!');
					return;
				}

				batch.orders.forEach((order, index) => {
					order.items.forEach(item => {
						if (item.item._id == id) {
							if (item.pickedQuantity < item.quantity) {
								// add the item to the order
								match.orderId = order.orderId;
								match._id = order._id;
								match.box = index + 1;
								item.pickedQuantity += parseInt($('#'+id+'-picked').val());
							}
						}
					});
				});

				if (match.orderId == undefined) {
					alert('Could not find the order that item belongs to.');
					return;
				}

				$('#boxNumber').text(match.box);
				$('#orderId').text(match.orderId);
				$('#doneSortingButton').removeClass('disabled');
				$('#item-barcode').addClass('diabled');
				$('#'+match._id+'-row').addClass('bg-primary text-white');
				rowToRemove = id;
			}